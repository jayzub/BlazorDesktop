@page "/review_machine"
@page "/review_machine/{TestID:int}"
@using System.Diagnostics;
@using System.IO;
@using WebviewAppShared.Data
@using System.Threading;
@using System.Data;

<h1>Review Machine</h1>
<style>
    
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
        padding-top: 60px;
    }

    
    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #ccc;
        color: #333; /* Dark gray text color */
        width: 25%;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
    }

    .close {
        color: #aaa;
        margin-left: auto;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .show-modal {
        display: block;
    }
</style>
@if (isLoading)
{
    @if (showLoadingModal)
    {
        <div class="modal @(showLoadingModal ? "show-modal" : "")">
            <div class="modal-content">
                <p>Please wait while the data collection process is running.</p>
            </div>
        </div>
    }

    @if (showFileNotFoundModal)
    {
        <div class="modal @(showFileNotFoundModal ? "show-modal" : "")">
            <div class="modal-content">
                <span class="close" @onclick="CloseModal">&times;</span>
                <p>MMRI application not found at the specified path. Please confirm MMRI installation status</p>
            </div>
        </div>
    }
}
else{
<div class="container">
    <div class="row">
        <div class="btn-group btn-breadcrumb breadcrumb-default bg-dark">
            <a href="#" class="btn btn-default visible-lg-block visible-md-block text-white font-weight-bold">DEFINE</a>
            <a href="#" class="btn btn-default visible-lg-block visible-md-block text-white font-weight-bold">CAPTURE</a>
            <a href="#" class="btn btn-default visible-lg-block visible-md-block text-white font-weight-bold">ANALYZE></a>
            <div class="btn btn-info"><b>REVIEW</b></div>
        </div>
		<p></p>

		<div class="card bg-dark" style="margin-top:50px">
            <div class="row no-gutters">
                <div class="col-md-3">
                    <img class="card-img border border-3 border-success" src="_content/WebviewAppShared/annihilator.jpg" alt="annihilator">
                </div>
                <div class="col-md-4">
                    <div class="card-body">
                        <h5 class="card-title font-weight-bold">Annihilator</h5>
                        <p class="card-text">Status: GOOD</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div>
						<h5 class="card-title">Serial Number: 5123</h5>
                        <p>Last Tested: 12 September 2022 </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
	<p></p>

	<table class="table table-image table-striped text-white" style="margin-top:50px">
		<thead>
			<tr>
				<th scope="col">Test Count</th>
				<th scope="col">Health</th>
				<th scope="col">Last Tested</th>
			</tr>
		</thead>
            <tbody>
                @{
                    int testCount = 0;
                }
                @foreach (String m in objPlotDatas)
                {
                    testCount++;
                    <!-- Move the count variable outside of the loop -->
                    <tr>
                        <td class="align-middle">@(testCount)</td> <!-- Increment count after displaying its value -->
                        <td class="align-middle font-weight-bold text-success">@m</td>
                        <td class="align-middle">@DateTime.Now.ToString("dd MMMM yyyy")</td>
                    </tr>
                }
            </tbody>
	</table>
</div>
}
@code {
    [Parameter]
    public int TestID { get; set; }
    private bool isLoading = true;
    private bool showLoadingModal;
    private bool showFileNotFoundModal = false;
    public String test { get; set; }
    public Database dbConn { get; set; }
    public DataTable dataTable { get; set; }
    public List<String> objPlotDatas { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (TestID != 0)
        {
            isLoading = true;
            showLoadingModal = true;
            // Wait for 3 seconds before hiding the loading modal
            await Task.Delay(3000);

            // Check if the file exists before attempting to start the process
            const string MMRI_PATH = @"C:\Program Files\McMaster Manufcutring Research Institute\MMRI_QM\application";
            const string EXE_NAME = "MMRI_QM.exe";
            string exePath = Path.Combine(MMRI_PATH, EXE_NAME);

            if (File.Exists(exePath))
            {
                ProcessStartInfo startInfo = new ProcessStartInfo
                    {
                        CreateNoWindow = false,
                        UseShellExecute = false,
                        FileName = exePath,
                        WindowStyle = ProcessWindowStyle.Hidden
                    };

                try
                {
                    using (Process exeProcess = Process.Start(startInfo))
                    {
                        await exeProcess.WaitForExitAsync();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error: {ex.Message}");
                    showFileNotFoundModal = true;
                    StateHasChanged();
                }
            }
            else
            {
                showLoadingModal = false;
                showFileNotFoundModal = true;
                StateHasChanged();
            }
            await Task.Delay(3000);
            showLoadingModal = false;
            dataFetchFromMMRI();
            isLoading = false;
            StateHasChanged();
        }
    }


    private void CloseModal()
    {
        showFileNotFoundModal = false;
    }
    private void dataFetchFromMMRI()
    {
        dbConn = new Database();
        int count = dbConn.GetCountA(TestID);

        string dataRetrievalQuery = $"SELECT D2 FROM D ORDER BY D2 DESC LIMIT {count}";
        dataTable = dbConn.GetData(dataRetrievalQuery);

        objPlotDatas = new List<string>();

        foreach (DataRow row in dataTable.Rows)
        {
            objPlotDatas.Add(row["D2"].ToString());
        }
    }
}