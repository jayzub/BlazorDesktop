@page "/review_machine"
@page "/review_machine/{TestID:int}"
@using System.Diagnostics;
@using System.IO;

<h1>Review Machine</h1> 

<div class="container">
    <div class="row">
        <div class="btn-group btn-breadcrumb breadcrumb-default bg-dark">
            <a href="#" class="btn btn-default visible-lg-block visible-md-block text-white font-weight-bold">DEFINE</a>
            <a href="#" class="btn btn-default visible-lg-block visible-md-block text-white font-weight-bold">CAPTURE</a>
            <a href="#" class="btn btn-default visible-lg-block visible-md-block text-white font-weight-bold">ANALYZE></a>
            <div class="btn btn-info"><b>REVIEW</b></div>
        </div>
		<p></p>

		<div class="card bg-dark" style="margin-top:50px">
            <div class="row no-gutters">
                <div class="col-md-3">
                    <img class="card-img border border-3 border-success" src="_content/WebviewAppShared/annihilator.jpg" alt="annihilator">
                </div>
                <div class="col-md-4">
                    <div class="card-body">
                        <h5 class="card-title font-weight-bold">Annihilator</h5>
                        <p class="card-text">Status: GOOD</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div>
						<h5 class="card-title">Serial Number: 5123</h5>
                        <p>Last Tested: 12 September 2022 </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
	<p></p>

	<table class="table table-image table-striped text-white" style="margin-top:50px">
		<thead>
			<tr>
				<th scope="col">Component</th>
				<th scope="col">Health</th>
				<th scope="col">Last Tested</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td class="align-middle">W Axis DE Bearing</td>
				<td class="align-middle font-weight-bold text-success">98%</td>
				<td class="align-middle">12 September 2022</td>
			</tr>
			<tr>
				<td class="align-middle">W Axis Ball Screw Bearing</td>
				<td class="align-middle font-weight-bold text-success">95%</td>
				<td class="align-middle">12 September 2022</td>
			</tr>
			<tr>
				<td class="align-middle">W Axis Linear Bearing</td>
				<td class="align-middle font-weight-bold text-warning">72%</td>
				<td class="align-middle">12 September 2022</td>
			</tr>
			<tr>
				<td class="align-middle">W Axis ODE Bearing</td>
				<td class="align-middle font-weight-bold text-success">89%</td>
				<td class="align-middle">12 September 2022</td>
			</tr>
			<tr>
				<td class="align-middle">X Axis )DE Bearing</td>
				<td class="align-middle font-weight-bold text-success">90%</td>
				<td class="align-middle">12 September 2022</td>
			</tr>
		</tbody>
	</table>
    @if (showModal)
    {
        <div class="modal">
            <div class="modal-content">
                <span class="close" @onclick="CloseModal">&times;</span>
                <p>MMRI application not found at the specified path.</p>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int TestID { get; set; }
    private bool showModal = false;

    protected override void OnInitialized()
    {
        //if (TestID!=0)
        {
            appMMRITrigger();
        }
        base.OnInitialized();
    }

    private void appMMRITrigger()
    {
        const string MMRI_PATH = @"C:\Program Files\McMaster Manufacturing Research Institute\MMRI_QM\application";
        const string EXE_NAME = "MMRI_QM.exe";
        string exePath = Path.Combine(MMRI_PATH, EXE_NAME);
        ProcessStartInfo startInfo = new ProcessStartInfo
            {
                CreateNoWindow = false,
                UseShellExecute = false,
                FileName = exePath,
                WindowStyle = ProcessWindowStyle.Hidden
            };

        try
        {
            using (Process exeProcess = Process.Start(startInfo))
            {
                exeProcess.WaitForExit();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            showModal = true;
            StateHasChanged();
        }
    }

    private void CloseModal()
    {
        showModal = false;
        StateHasChanged();
    }
}