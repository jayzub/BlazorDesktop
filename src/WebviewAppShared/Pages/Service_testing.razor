@page "/test_setup/service_testing"
@page "/service_testing/{TestID:int}/{Sensor}/{duration:int}/{daqModel}/{daqSerialnumb:long}/{accelerometer}/{x_sensitivity:double}/{y_sensitivity:double}/{z_sensitivity:double}/{frequency:int}"
@using WebviewAppShared.Data
@using System.Text.Json;
@using NationalInstruments.DAQmx;
@using System.IO;
@using System.Threading; 
@using System.Data;
@using System.Collections.Generic;
@using System.Diagnostics;
@using CsvHelper;
@using CsvHelper.Configuration;
@using System.Globalization
@using System.Text.RegularExpressions
@using System.Collections
@inject NavigationManager navigationManager
@inject Microsoft.JSInterop.IJSRuntime JSRuntime

<h1>Service Testing</h1>

<span class="danger">
    @Message
    @message2
</span>
@*<p>@Sensor</p>
<p>@test</p>
<p>sensor  Data ------------</p>
<p>@sensorData.S2</p>
<p>@sensorData.S3</p>
<p>@sensorData.S4</p>
<p>@sensorData.S5</p>
<p>@sensorData.S6</p>
<p>@sensorData.S7</p>
<p>@sensorData.S8</p>
<p>@sensorData.S9</p>*@
<div class="container">
    <div class="row">
        <div class="btn-group btn-breadcrumb breadcrumb-default bg-dark">
            <a href="/test_setup/" class="btn btn-default visible-lg-block visible-md-block text-white font-weight-bold">DEFINE</a>
            <div class="btn btn-info"><b>CAPTURE</b></div>
            <a href="/test_setup/review_machine" class="btn btn-default visible-lg-block visible-md-block text-white font-weight-bold">ANALYZE</a>
        </div>
    </div>
    <div class="row" style="margin-top:50px">
        <div class="col-sm-5 card bg-transparent">

            @*<form>

                @foreach (MC m in machineComponents)
                {
                    <label class="col col-form-label">
                        @m.MC3 @m.MC4 <span>(@m.count of 3)</span>
                        @if (@m.count == 3)
                        {
                            <span class="oi oi-check" style="color: green" aria-hidden="true"></span>
                        }
                    </label>
                }
*@

                @*
                <label class="col col-form-label">W Axis DE Bearing <span>(3 of 3)</span> <span class="oi oi-check" style="color: green" aria-hidden="true"></span></label>
                <label class="col col-form-label">W Axis Ballscrew <span>(3 of 3)</span><span class="oi oi-check" style="color: green" aria-hidden="true"></span></label>
                <label class="col col-form-label">W Axis Linear Rail <span>(3 of 3)</span><span class="oi oi-check" style="color: green" aria-hidden="true"></span></label>
                <label class="col col-form-label">W Axis ODE Bearing <span>(3 of 3)</span><span class="oi oi-check" style="color: green" aria-hidden="true"></span></label>
                <label class="col col-form-label text-warning">X Axis ODE Bearing<span>(1 of 3)</span></label>
                <label class="col col-form-label">X Axis DE Bearing<span>(0 of 3)</span></label>
                <label class="col col-form-label">X Axis Ballscrew <span>(0 of 3)</span></label>
                <label class="col col-form-label">X Axis Linear Rail <span>(0 of 3)</span></label>
                <label class="col col-form-label">Y Axis DE Bearing <span>(0 of 3)</span></label>
                <label class="col col-form-label">Y Axis Ballscrew <span>(0 of 3)</span></label>
                <label class="col col-form-label">Y Axis Linear Rail <span>(0 of 3)</span></label>
                <label class="col col-form-label">Y Axis ODE Bearing <span>(0 of 3)</span></label>
                <label class="col col-form-label">Z Axis DE Bearing <span>(0 of 3)</span></label>
                <label class="col col-form-label">Z Axis Ballscrew <span>(0 of 3)</span></label>
                <label class="col col-form-label">Z Axis Linear Rail <span>(0 of 3)</span></label>
                <label class="col col-form-label">Z Axis ODE Bearing <span>(0 of 3)</span></label>
                *@
            @*</form>*@
            <form>
                <div class="form-group row">
                    <label class="col col-form-label font-weight-bold">Components</label>
                </div>
                <div class="combiner combine_head" style="display:flex;flex-direction:row;flex-flow: row wrap;">
                    <div class="col">
                        @foreach (MC m in machineComponents)
                        {

                            <div class="roundedStylings">
                                <p>@m.MC3 @m.MC4</p>
                                <div class="roundedMargin">
                                    <button class="noStyle" @onclick="()=>GetDataPlotValue(TestID.ToString(),m.DataPlotPointerValue[0].ToString())" type="button">
                                        <span class="rounded" aria-hidden="true">1</span>
                                    </button>
                                    <button class="noStyle" @onclick="()=>GetDataPlotValue(TestID.ToString(),m.DataPlotPointerValue[1].ToString())" type="button">
                                        <span class="rounded" aria-hidden="true">2</span>
                                    </button>
                                    <button class="noStyle" @onclick="()=>GetDataPlotValue(TestID.ToString(),m.DataPlotPointerValue[2].ToString())" type="button">
                                        <span class="rounded" aria-hidden="true">3</span>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </form>
        </div>


        <div class="col-sm-4 card bg-dark">
            <img class="card-img" src="_content/WebviewAppShared/bearing.png" alt="bearing">
        </div>

        <div class="col-sm-3 card bg-transparent">
            <form>
                <div class="form-group row">
                    <label class="col col-form-label font-weight-bold">G-Code Program:</label>
                </div>

                <div class="form-group row">
                    @*<label class="col col-form-label">Intimidator 120 XW-Axix.nc</label>*@
                </div>
                <div class="form-group row">
                    <label class="col col-form-label text-success">Export Program</label>
                </div>
            </form>
        </div>
        <div class="my-5 mx-0" style="width:950px;padding:0;">
            <RadzenChart Style="height:400px;margin-left:0px;color:white">
                <RadzenLineSeries Smooth="true" Data="@objPlotDatas" CategoryProperty="TimeStamp" Title="X_Axis" LineType="LineType.Solid" ValueProperty="X_Axis" />
                <RadzenLineSeries Smooth="false" Data="@objPlotDatas" CategoryProperty="TimeStamp" Title="Y_Axis" ValueProperty="Y_Axis" />
                <RadzenLineSeries Smooth="false" Data="@objPlotDatas" CategoryProperty="TimeStamp" Title="Z_Axis" ValueProperty="Z_Axis" />
                <RadzenValueAxis Min="-50" Max="50" />
                <RadzenCategoryAxis Formatter=@(value => ((DateTime)value).ToString("H:mm:ss")) Padding="20" />
            </RadzenChart>
        </div>
    </div>
    <div class="row">
        <div class="col text-center">
            @if (TestCompleted == true)
            {
                <span>Test Complete</span>
            }
        </div>
    </div>

    @* <div class="row" style="margin-top:50px">
    <div class="col text-center">
    @if (moveSensor == false && underTest == true)
    {
    <button type="button" class="btn btn-success btn-lg" @onclick="loop">Acquire Data</button>
    }
    else if (moveSensor == true)
    {
    <span>Move the sensor and click the button below</span>
    <br>
    <button type="button" class="btn btn-success btn-lg" @onclick="onMoveSensor">Ready</button>
    }
    else
    {
    <button type="button" class="btn btn-success btn-lg" @onclick="startDataAcquisiton">Start</button>
    }



    </div>

    </div>*@

    <!-- Add the loader HTML element -->

    <div class="row" style="margin-top:50px">
        <div class="col text-center">
            @if (TestCompleted == true)
            {
                <button type="button" class="btn btn-success btn-lg" @onclick="viewData">View Collected Data</button>
            }
            else
            {


                @if (moveSensor == false && underTest == true)
                {
                    <button style="display:inline" id="acquireDataButton" type="button" class="btn btn-success btn-lg" @onclick="@(async () => {
                    // Show the loader before calling the loop() function
                    await JSRuntime.InvokeVoidAsync("showLoader");
                    await loop();
                    // Hide the loader after the loop() function completes
                    await JSRuntime.InvokeVoidAsync("hideLoader");
                       })">
                        Acquire Data
                    </button>
                    <div id="loader" style="display: none;">
                        Loading...
                    </div>
                }
                else if (moveSensor == true)
                {
                    <span>Move the sensor and click the button below</span>
                    <br>
                    <button type="button" class="btn btn-success btn-lg" @onclick="onMoveSensor">Ready</button>
                }
                else
                {
                    <button type="button" class="btn btn-success btn-lg" @onclick="startDataAcquisiton">Start</button>
                }
                <br>
                <br>
                <button type="button" class="btn btn-success btn-lg" @onclick="viewData">View Partial Collected Data</button>
            }

        </div>
    </div>

    @*<span>@ind @mach.Machine_Name @mach.Axis @mach.Component @mach.count</span>*@

</div>





@code
{

    [Parameter]
    public int TestID { get; set; }
    [Parameter]
    public String Sensor { get; set; }
    [Parameter]
    public int duration { get; set; }
    [Parameter]
    public string daqModel { get; set; }
    [Parameter]
    public long daqSerialnumb { get; set; }
    [Parameter]
    public String accelerometer { get; set; }
    [Parameter]
    public double x_sensitivity { get; set; }
    [Parameter]
    public double y_sensitivity { get; set; }
    [Parameter]
    public double z_sensitivity { get; set; }
    [Parameter]
    public int frequency { get; set; }
    public string Message { get; set; }
    public string message2 { get; set; }

    public String test{ get; set; }
    public Database dbConn { get; set; }
    public DataTable dataTable { get; set; }
    public bool TestCompleted { get; set; }
    public bool underTest { get; set; }
    public bool moveSensor { get; set; }
    public bool collectingData { get; set; }
    public int ind = 0;
    public DataTable testRoundData { get; set; }
    public List<DataPlots> objPlotDatas { get; set; }



    MC mach = new MC();
    S sensorData = new S();


    List<MC> machineComponents = new List<MC>();
    List<B> featureData = new List<B>();




    protected override System.Threading.Tasks.Task OnInitializedAsync()
    {
        sensorData.S2 = Sensor;
        sensorData.S3 = daqModel;
        sensorData.S4 = daqSerialnumb;
        sensorData.S5 = accelerometer;
        sensorData.S6 = x_sensitivity;
        sensorData.S7 = y_sensitivity;
        sensorData.S8 = z_sensitivity;
        sensorData.S9 = frequency;
        int batchSize = 3; // Number of records to fetch in each iteration
        int currentIndex = 0;



        TestCompleted = false;
        underTest = false;
        collectingData = false;
        dbConn = new Database();

        // To be updated later
        //string query = @"select MachineComponents.Id Machine.Machine_Name, MachineComponents.Axis, MachineComponents.Component from MachineComponents , Machine where MachineComponents.Machine_Id = Machine.Id and Machine.Id = 1";

        //string query = "select m1.Id, m.Machine_Name, M1.Axis, M1.Component from MachineComponents m1, machine m where m1.Machine_Id = m.Id and m.Id = 1";

        // Updated query with testID passed from previous component.
        string query = "select m.M1,m.M2,mc.MC1, mc.MC2, mc.MC3, mc.MC4, mc.MC5, mc.MC6 from M m, TD td, MC mc where td.TD2 = m.M1 and m.M2 = mc.MC2 and td.TD1 =" + TestID;
        //string query = "select * from MachineComponents";

        dataTable = dbConn.GetData(query);



        foreach (DataRow row in dataTable.Rows)
        {
            MC mc = new MC();
            mc.MC1 = row["MC1"].ToString();
            mc.MC2 = row["MC2"].ToString();
            mc.MC3 = row["MC3"].ToString();
            mc.MC4 = row["MC4"].ToString();
            mc.MC5 = row["MC5"].ToString();
            mc.MC6 = row["MC6"].ToString();

            mc.M1 = row["M1"].ToString();
            mc.M2 = row["M2"].ToString();
            mc.count = 0;

            //machineComponents.Add(mc);

            //MC.dataPlotHolder holder = new MC.dataPlotHolder();

            //string query3 = String.Format("Select A1 FROM A where A.A0 = {0}", TestID);
            //testRoundData = dbConn.GetData(query3);
            //holder.Count = new string[] { "1", "2", "3" }; // Fixed count values for each batch
            //for (int i = 0; i < batchSize && currentIndex < testRoundData.Rows.Count; i++)
            //{
            //    DataRow data = testRoundData.Rows[currentIndex];
            //    holder.DataPlotPointerValue[i] = Convert.ToInt32(data["A1"]);
            //    currentIndex++;
            //}

            //// Add the dataPlotHolder instance to the DataPlotHolders list for this component
            //mc.DataPlotHolders.Add(holder);
            machineComponents.Add(mc);
        }

        string query2 = $"select * from S where s2='{Sensor}'";

        dataTable = dbConn.GetData(query2);


        // Access the first row of the DataTable
        //if (dataTable.Rows.Count > 0)
        //{
        //    DataRow firstRow = dataTable.Rows[0];

        //    // Populate the properties of the sensorData instance from the first row
        //    sensorData.S1 = Convert.ToInt32(firstRow["S1"]);
        //    sensorData.S2 = firstRow["S2"].ToString();
        //    sensorData.S3 = firstRow["S3"].ToString();
        //    sensorData.S4 = Convert.ToInt32(firstRow["S4"]);
        //    sensorData.S5 = firstRow["S5"].ToString();
        //    sensorData.S6 = Convert.ToDouble(firstRow["S6"]);
        //    sensorData.S7 = Convert.ToDouble(firstRow["S7"]);
        //    sensorData.S8 = Convert.ToDouble(firstRow["S8"]);
        //    sensorData.S9 = Convert.ToInt32(firstRow["S9"]);
        //}

        return base.OnInitializedAsync();
    }

    private async System.Threading.Tasks.Task loop()
    {

        if (ind < machineComponents.Count)
        {


            mach = machineComponents[ind];
            mach.count += 1;
            DataTable d = acquireData(Sensor, TestID, int.Parse(mach.MC1), mach.count, sensorData);
            // To do- insert in excel
            //dbConn.BulkInsert(d);
            DateTime datetime = DateTime.Now.Date;
            string formattedDate = datetime.ToString("yyyy-MM-dd");
            //DateTime dateOnly = datetime.Date;
            //DateTime datetime = DateTime.Date;
            //string fileName = @$"QUICKMILL\{dateOnly}-{mach.MC2}-{mach.M1}\{dateOnly}-{mach.MC3}-{mach.MC4}.csv";
            string folderPath = "QUICKMILL";
            string subFolderPath = $"{formattedDate}-{mach.M2}-{mach.M1}-{TestID}";
            string filePath = Path.Combine(folderPath, subFolderPath, $"{formattedDate}-{mach.MC3}-{mach.MC4}-{mach.count}.csv");



            // Check if the folder exists
            if (!Directory.Exists(folderPath))
            {
                // Create the folder if it doesn't exist
                Directory.CreateDirectory(folderPath);
            }
            if (!Directory.Exists(Path.Combine(folderPath, subFolderPath)))
            {
                // Create the subfolder if it doesn't exist
                Directory.CreateDirectory(Path.Combine(folderPath, subFolderPath));
            }
            //string filePath = @"QUICKMILL/data_table.csv";
            DataTableToCsv(d, filePath);
            string query = "INSERT INTO A(A0, A2, A3)VALUES('"+ TestID + "','" + filePath + "','" + mach.MC6 +"')";          
            dbConn.InsertData(query);
            string query1 = @"select A.A1,M.M1,M.M3,TD.TD3,MC.MC3,MC.MC4,MC.MC5,TD.TD4 
                              from A,M,MC,TD where MC.MC2=M.M2 and TD.TD2=M.M1 and TD.TD1='" + TestID + "'order by A1 desc limit 1;";
            dataTable = dbConn.GetData(query1);
            foreach (DataRow row in dataTable.Rows)
            {
                //MC mc = new MC();
                //TD td = new TD();
                //S s=new S();
                //M m=new M();
                //A a = new A();
                //DateTime datetime = DateTime.Now.Date;
                B b = new B();
                b.B1 = Convert.ToInt32(row["A1"]);
                b.B2 = datetime.ToShortDateString().ToString();
                b.B3 = sensorData.S3;
                b.B4 = sensorData.S4;
                b.B5 = sensorData.S5;
                b.B6 = sensorData.S6;
                b.B7 = sensorData.S7;
                //test = row["S6"].ToString();
                b.B8 = sensorData.S8;
                b.B9 = Convert.ToInt32(row["M1"]);
                b.B10 = Convert.ToInt32(row["TD3"]);
                b.B11 = row["MC3"].ToString();
                b.B12 = row["MC4"].ToString();
                b.B14 = row["MC5"].ToString();
                b.B19 = row["TD4"].ToString();
                b.B15 = "AXIAL";
                b.B16 = "CIRC";
                b.B17 = "RADIAL";
                b.B21 = sensorData.S9; 
                string query2 = "INSERT INTO B(B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B12,B14,B15,B16,B17,B19,B21)VALUES('" + b.B1 + "','" + b.B2 + "','" + b.B3 + "','" + b.B4 + "','" + b.B5 + "','" + b.B6 + "','" + b.B7 + "','" + b.B8 + "','" + b.B9 + "','" + b.B10 + "','" + b.B11 + "','" + b.B12 + "','" + b.B14 + "','" + b.B15 + "','" + b.B16 + "','" + b.B17 + "','" + b.B19 + "','" + b.B21 + "')";
                dbConn.InsertData(query2);

                //mc.MC1 = row["MC1"].ToString();
                //mc.MC2 = row["MC2"].ToString();
                //mc.MC3 = row["MC3"].ToString();
                //mc.MC4 = row["MC4"].ToString();
                //mc.M1 = row["M1"].ToString();
                //mc.M2 = row["M2"].ToString();
                //mc.count = 0;

                //machineComponents.Add(mc);


                //


                string query3 = String.Format("Select max(A1)  as MAX FROM A");
                DataTable dt = dbConn.GetData(query3);
                var max_test_id = dt.Rows[0]["MAX"].ToString();


                machineComponents[ind].DataPlotPointerValue[mach.count - 1] = Convert.ToInt32(max_test_id);

                // Add the dataPlotHolder instance to the DataPlotHolders list for this component
                
                //
            }
            if (mach.count == 3)
            {
                
                moveSensor = true;
                ind++;
            }

        }
        if (ind >= machineComponents.Count)
        {
            moveSensor = false;
            underTest = false;
            TestCompleted = true;
        }

    }

    // Define the showLoader() JavaScript function using the JSRuntime service
    //protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        await JSRuntime.InvokeVoidAsync("eval", @"
    //            function showLoader() {
    //                document.getElementById('loader').style.display = 'block';
    //            }
    //        ");
    //    }
    //}

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
            function showLoader() { acquireDataButton
                document.getElementById('loader').style.display = 'block';
                document.getElementById('acquireDataButton').style.display = 'none';
            }
            function hideLoader() {
                document.getElementById('loader').style.display = 'none';
                document.getElementById('acquireDataButton').style.display = 'inline';
            }
        ");
        }
    }

    private void viewData()
    {
        navigationManager
            .NavigateTo($"/data_plot/{TestID}");
    }

    private void onMoveSensor()
    {
        moveSensor = false;
    }


    private void startDataAcquisiton()
    {
        underTest = true;

        //foreach (MachineComponent m in machineComponents){
        //    for (int j =1;j <=3 ; j++)
        //    {
        //        m.count = j;
        //        DataTable d = acquireData("cDAQ1Mod1");

        //        int i = 0;
        //        foreach (DataRow dtRow in d.Rows)
        //        {

        //            Console.Write("Row " + i + ": ");
        //            foreach (var item in dtRow.ItemArray)
        //            {
        //                Console.Write(item.ToString() + "  ");
        //            }
        //            i++;
        //            Console.WriteLine();
        //        }



        //        dbConn.BulkInsert(d);
        //    }
        //}

        //TestCompleted = true;





        /*string connectionString = @"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=QuickMill;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False";
        using (SqlConnection connection = new SqlConnection(connectionString))
        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connection))
            {
            connection.Open();
            bulkCopy.DestinationTableName = "TestTable";
            bulkCopy.WriteToServer(d);
        }
        Console.WriteLine("Done All End");
    */
    }


    // Code to acquire data from the sensor and return that data in form of a data table

    private DataTable acquireData(string deviceName, int gTestId, int componentId, int testRound, S sensorData)
    {
        DataTable dt = new DataTable();
        try
        {
            var timeStamp = new List<string>();
            double start;
            double end;


            // Define Parameters
            int rate = sensorData.S9;
            int _samplesPerChannel = (duration >= 30) ? duration - 10 : duration - 5;
            int bufferSize = rate * _samplesPerChannel;

            //Inilitiaze task
            NationalInstruments.DAQmx.Task acelerometerTask1 = new NationalInstruments.DAQmx.Task();

            //Define Channels
            acelerometerTask1.AIChannels.CreateAccelerometerChannel($"{deviceName}/ai0", "A00", AITerminalConfiguration.Pseudodifferential, -50, 50, sensorData.S6, AIAccelerometerSensitivityUnits.MillivoltsPerG, AIExcitationSource.None, 0, AIAccelerationUnits.G);
            acelerometerTask1.AIChannels.CreateAccelerometerChannel($"{deviceName}/ai1", "A01", AITerminalConfiguration.Pseudodifferential, -50, 50, sensorData.S7, AIAccelerometerSensitivityUnits.MillivoltsPerG, AIExcitationSource.None, 0, AIAccelerationUnits.G);
            acelerometerTask1.AIChannels.CreateAccelerometerChannel($"{deviceName}/ai2", "A02", AITerminalConfiguration.Pseudodifferential, -50, 50, sensorData.S8, AIAccelerometerSensitivityUnits.MillivoltsPerG, AIExcitationSource.None, 0, AIAccelerationUnits.G);

            acelerometerTask1.Timing.ConfigureSampleClock("", rate, SampleClockActiveEdge.Rising, SampleQuantityMode.FiniteSamples, bufferSize);
            // This is the timing for data collection
            acelerometerTask1.Stream.Timeout = duration * 1000;// seconds to milliseconds
            acelerometerTask1.Control(TaskAction.Verify);
            start = DateTime.Now.ToOADate();
            collectingData = true;
            acelerometerTask1.Start();

            AnalogMultiChannelReader reader1 = new AnalogMultiChannelReader(acelerometerTask1.Stream);

            double[,] data = reader1.ReadMultiSample(bufferSize);

            acelerometerTask1.Dispose();
            end = DateTime.Now.ToOADate();
            collectingData = false;

            Console.WriteLine(DateTime.FromOADate(start).ToString("yyyy’-‘MM’-‘dd’T’HH’:’mm’:’ss.fffffffK"));
            Console.WriteLine(DateTime.FromOADate(end).ToString("yyyy’-‘MM’-‘dd’T’HH’:’mm’:’ss.fffffffK"));


            //Calculate time difference between each sample
            double diff = (end - start) / (double)bufferSize;


            //Define data columns
            DataColumn dtColumn;
            DataRow dtRow;

            // Create TimeStamp column.
            dtColumn = new DataColumn();
            dtColumn.DataType = typeof(double);
            dtColumn.ColumnName = "TimeStamp";
            //dtColumn.Caption = "Cust Name";
            dtColumn.AutoIncrement = false;
            dtColumn.ReadOnly = false;
            dtColumn.Unique = false;
            dt.Columns.Add(dtColumn);

            // Create X-axis column.
            dtColumn = new DataColumn();
            dtColumn.DataType = typeof(decimal);
            dtColumn.ColumnName = "X-Axis";
            //dtColumn.Caption = "Cust Name";
            dtColumn.AutoIncrement = false;
            dtColumn.ReadOnly = false;
            dtColumn.Unique = false;
            dt.Columns.Add(dtColumn);



            // Create y-axis column.
            dtColumn = new DataColumn();
            dtColumn.DataType = typeof(decimal);
            dtColumn.ColumnName = "Y-Axis";
            //dtColumn.Caption = "Cust Name";
            dtColumn.AutoIncrement = false;
            dtColumn.ReadOnly = false;
            dtColumn.Unique = false;
            dt.Columns.Add(dtColumn);


            // Create z-axis column.
            dtColumn = new DataColumn();
            dtColumn.DataType = typeof(decimal);
            dtColumn.ColumnName = "Z-Axis";
            //dtColumn.Caption = "Cust Name";
            dtColumn.AutoIncrement = false;
            dtColumn.ReadOnly = false;
            dtColumn.Unique = false;
            dt.Columns.Add(dtColumn);

            //// Create gTest ID Coulmn.
            //dtColumn = new DataColumn();
            //dtColumn.DataType = typeof(int);
            //dtColumn.ColumnName = "G_test_id";
            //dtColumn.AutoIncrement = false;
            //dtColumn.ReadOnly = false;
            //dtColumn.Unique = false;
            //dt.Columns.Add(dtColumn);

            //// Create Component ID Coulmn.
            //dtColumn = new DataColumn();
            //dtColumn.DataType = typeof(int);
            //dtColumn.ColumnName = "Component_id";
            //dtColumn.AutoIncrement = false;
            //dtColumn.ReadOnly = false;
            //dtColumn.Unique = false;
            //dt.Columns.Add(dtColumn);

            //// Create testRound ID Coulmn.
            //dtColumn = new DataColumn();
            //dtColumn.DataType = typeof(int);
            //dtColumn.ColumnName = "Test_Round";
            //dtColumn.AutoIncrement = false;
            //dtColumn.ReadOnly = false;
            //dtColumn.Unique = false;
            //dt.Columns.Add(dtColumn);

            // Filling the dataTable
            for (int i = 0; i < data.GetLength(1); i++)
            {
                dtRow = dt.NewRow();
                double voltsToMillivolts = 1000.0; // 1 Volt = 1000 Millivolts
                dtRow["TimeStamp"] = start + (diff * i);
                dtRow["X-Axis"] = data[0, i];
                dtRow["Y-Axis"] = data[1, i];
                dtRow["Z-Axis"] = data[2, i];
                //dtRow["G_test_id"] = gTestId;
                //dtRow["Component_id"] = componentId;
                //dtRow["Test_Round"] = testRound;
                dt.Rows.Add(dtRow);
            }
        }
        catch (Exception e)
        {
            Message = $"Error : {e}";
        }



        return dt;
    }
    //public void machineComponentDataFetch(Database dbConn)
    //{
    //    //string query = "select m.M1, m.M2, mc.MC1, mc.MC2, mc.MC3, mc.MC4 from M m, TD td, MC mc where td.TD2 = m.M1 and m.M2 = mc.MC2 and td.TD1 =" + TestID;
    //    //dataTable = dbConn.GetData(query);
    //    int batchSize = 3; // Number of records to fetch in each iteration
    //    int currentIndex = 0; // Keep track of the current index in the dataTable
    //    foreach (DataRow row in dataTable.Rows)
    //    {
    //        MC mc = new MC();
    //        mc.MC1 = row["MC1"].ToString();
    //        mc.MC2 = row["MC2"].ToString();
    //        mc.MC3 = row["MC3"].ToString();
    //        mc.MC4 = row["MC4"].ToString();

    //        // Fetch the next batch of records from query2 and populate dataPlotPointerValue
    //        string query2 = String.Format("Select A1 FROM A where A.A0 = {0}", TestID);
    //        testRoundData = dbConn.GetData(query2);

    //        MC.dataPlotHolder holder = new MC.dataPlotHolder();

    //        holder.Count = new string[] { "1", "2", "3" }; // Fixed count values for each batch
    //        for (int i = 0; i < batchSize && currentIndex < testRoundData.Rows.Count; i++)
    //        {
    //            DataRow data = testRoundData.Rows[currentIndex];
    //            holder.DataPlotPointerValue[i] = Convert.ToInt32(data["A1"]);
    //            currentIndex++;
    //        }

    //        // Add the dataPlotHolder instance to the DataPlotHolders list for this component
    //        mc.DataPlotHolders.Add(holder);
    //        machineComponents.Add(mc);
    //    }
    //}

    public void GetDataPlotValue(string id, string testround)
    {
        message2 = $"ID = {id}, TestRound = {testround}";

        string query4 = String.Format("Select A2 FROM A where A.A0={0} and A.A1={1}", TestID, testround);
        dataTable = dbConn.GetData(query4);
        objPlotDatas = new List<DataPlots>();

        if (dataTable.Rows.Count == 1) // Assuming the query returns a single row with the CSV path
        {
            string csvPath = dataTable.Rows[0]["A2"].ToString();

            // Read the CSV file using CsvHelper
            using (var reader = new StreamReader(csvPath))
            using (var csv = new CsvReader(reader, new CsvConfiguration(new CultureInfo("en-US"))))
            {
                // Read the CSV data as a list of dictionaries
                var recordsAsDictionaries = csv.GetRecords<dynamic>().ToList();

                // Map the data to the DataPlots class
                for (int i = 0; i < recordsAsDictionaries.Count; i += 5000)
                {

                    var record = recordsAsDictionaries[i];

                    DataPlots dataPlots = new DataPlots();
                    dataPlots.TimeStamp = ConvertToDateTime(record.TimeStamp.ToString());
                    dataPlots.X_Axis = Convert.ToDouble(((IDictionary<string, object>)record)["X-Axis"]);
                    dataPlots.Y_Axis = Convert.ToDouble(((IDictionary<string, object>)record)["Y-Axis"]);
                    dataPlots.Z_Axis = Convert.ToDouble(((IDictionary<string, object>)record)["Z-Axis"]);
                    objPlotDatas.Add(dataPlots);
                }
            }
        }
        else
        {
            Message = "Data not available";
        }
    }
    public sealed class DataPlotsMap : ClassMap<DataPlots>
    {
        public DataPlotsMap()
        {
            // Map the property names to the CSV headers
            Map(m => m.TimeStamp).Name("TimeStamp");
            Map(m => m.X_Axis).Name("X-Axis");
            Map(m => m.Y_Axis).Name("Y-Axis");
            Map(m => m.Z_Axis).Name("Z-Axis");
        }
    }
    public static string ConvertToFormattedDateTime(string str)
    {
        if (double.TryParse(str, out var timeStampValue))
        {
            DateTime dateTime = DateTime.FromOADate(timeStampValue);
            return dateTime.ToString("yyyy-MM-dd HH:mm:ss.fffffffK");
        }
        else
        {
            throw new Exception("Unable to parse the input as a valid DateTime.");
        }
    }
    public static DateTime ConvertToDateTime(string str)
    {
        string formattedDateTime = ConvertToFormattedDateTime(str);
        string pattern = @"(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})\.(\d{3})";
        if (Regex.IsMatch(formattedDateTime, pattern))
        {
            Match match = Regex.Match(formattedDateTime, pattern);
            int year = Convert.ToInt32(match.Groups[1].Value);
            int month = Convert.ToInt32(match.Groups[2].Value);
            int day = Convert.ToInt32(match.Groups[3].Value);
            int hour = Convert.ToInt32(match.Groups[4].Value);
            int minute = Convert.ToInt32(match.Groups[5].Value);
            int second = Convert.ToInt32(match.Groups[6].Value);
            int millisecond = Convert.ToInt32(match.Groups[7].Value);
            return new DateTime(year, month, day, hour, minute, second, millisecond);
        }
        else
        {
            throw new Exception("Unable to parse.");
        }
    }

    private void DataTableToCsv(DataTable dataTable, string filePath)
    {
        // Create the CSV file and write the headers
        using (StreamWriter writer = new StreamWriter(filePath))
        {
            for (int i = 0; i < dataTable.Columns.Count; i++)
            {
                writer.Write(dataTable.Columns[i]);
                if (i < dataTable.Columns.Count - 1)
                    writer.Write(",");
            }
            writer.WriteLine();

            // Write the data rows
            foreach (DataRow row in dataTable.Rows)
            {
                for (int i = 0; i < dataTable.Columns.Count; i++)
                {
                    writer.Write(row[i]);
                    if (i < dataTable.Columns.Count - 1)
                        writer.Write(",");
                }
                writer.WriteLine();
            }
        }
    }


}
