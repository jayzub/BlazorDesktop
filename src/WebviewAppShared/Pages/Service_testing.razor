@page "/service_testing"
@using WebviewAppShared.Data
@using NationalInstruments.DAQmx;

@using System.Data;
@using System.Collections.Generic;
@inject NavigationManager NavigationManager


<h1>Service Testing</h1>

<div class="container">
    <div class="row">
        <div class="btn-group btn-breadcrumb breadcrumb-default bg-dark">
            <a href="#" class="btn btn-default visible-lg-block visible-md-block text-white font-weight-bold">DEFINE</a>
            <div class="btn btn-info"><b>CAPTURE</b></div>
            <a href="#" class="btn btn-default visible-lg-block visible-md-block text-white font-weight-bold">ANALYZE</a>
            <a href="#" class="btn btn-default visible-lg-block visible-md-block text-white font-weight-bold">REVIEW</a>
        </div>
    </div>

    <div class="row" style="margin-top:50px">
        <div class="col-sm-4 card bg-transparent">
            <form>

                @foreach (MachineComponent m in machineComponents)
                {
                    <label class="col col-form-label">@m.Axis @m.Component <span>(@m.count of 3)</span>
                        @if (@m.count == 3)
                        {
                            <span class="oi oi-check" style="color: green" aria-hidden="true"></span>
                        }    
                    </label>
                }


                @*
                <label class="col col-form-label">W Axis DE Bearing <span>(3 of 3)</span> <span class="oi oi-check" style="color: green" aria-hidden="true"></span></label>
                <label class="col col-form-label">W Axis Ballscrew <span>(3 of 3)</span><span class="oi oi-check" style="color: green" aria-hidden="true"></span></label>
                <label class="col col-form-label">W Axis Linear Rail <span>(3 of 3)</span><span class="oi oi-check" style="color: green" aria-hidden="true"></span></label>
                <label class="col col-form-label">W Axis ODE Bearing <span>(3 of 3)</span><span class="oi oi-check" style="color: green" aria-hidden="true"></span></label>
                <label class="col col-form-label text-warning">X Axis ODE Bearing<span>(1 of 3)</span></label>
                <label class="col col-form-label">X Axis DE Bearing<span>(0 of 3)</span></label>
                <label class="col col-form-label">X Axis Ballscrew <span>(0 of 3)</span></label>
                <label class="col col-form-label">X Axis Linear Rail <span>(0 of 3)</span></label>
                <label class="col col-form-label">Y Axis DE Bearing <span>(0 of 3)</span></label>
                <label class="col col-form-label">Y Axis Ballscrew <span>(0 of 3)</span></label>
                <label class="col col-form-label">Y Axis Linear Rail <span>(0 of 3)</span></label>
                <label class="col col-form-label">Y Axis ODE Bearing <span>(0 of 3)</span></label>
                <label class="col col-form-label">Z Axis DE Bearing <span>(0 of 3)</span></label>
                <label class="col col-form-label">Z Axis Ballscrew <span>(0 of 3)</span></label>
                <label class="col col-form-label">Z Axis Linear Rail <span>(0 of 3)</span></label>
                <label class="col col-form-label">Z Axis ODE Bearing <span>(0 of 3)</span></label>
                *@
            </form>
        </div>


        <div class="col-sm-5 card bg-dark">
            <img class="card-img" src="_content/WebviewAppShared/bearing.png" alt="bearing">
        </div>

        <div class="col-sm-3 card bg-transparent">
            <form>
                <div class="form-group row">
                    <label class="col col-form-label font-weight-bold">G-Code Program:</label>
                </div>

                <div class="form-group row">
                    <label class="col col-form-label">Intimidator 120 XW-Axix.nc</label>
                </div>
                <div class="form-group row">
                    <label class="col col-form-label text-success">Export Program</label>
                </div>
            </form>
        </div>
    </div>
    <div class="row">
        <div class="col text-center">
            @if (TestCompleted == true)
            {
                <span>Test Complete</span>
            }
        </div>
    </div>
    
    <div class="row" style="margin-top:50px">
        <div class="col text-center">

            @if (moveSensor == false && underTest == true)
            {
                <button type="button" class="btn btn-success btn-lg" @onclick="loop">Acquire Data</button>
            }
            else if (moveSensor == true)
            {
                <span>Move the sensor and click the button below</span>
                <button type="button" class="btn btn-success btn-lg" @onclick="onMoveSensor">Ready</button>
            }
            else
            {
                <button type="button" class="btn btn-success btn-lg" @onclick="startDataAcquisiton">Start</button>
            }
            

           
            
        </div>
       
    </div>
    
    <span>@ind @mach.Machine_Name @mach.Axis @mach.Component @mach.count</span>

</div>



@code
{

    public Database dbConn { get; set; }
    public DataTable dataTable { get; set; }
    public bool TestCompleted { get; set; }
    public bool underTest { get; set; }
    public bool moveSensor { get; set; }
    public int ind = 0;
    MachineComponent mach = new MachineComponent();


    List<MachineComponent>  machineComponents = new List<MachineComponent>();

    private void onChangeSite()
    {
        NavigationManager.NavigateTo("/data_plot");
    }

    protected override System.Threading.Tasks.Task OnInitializedAsync()
    {
        TestCompleted = false;
        underTest = false;
        dbConn = new Database();

        // To be updated later
        //string query = @"select MachineComponents.Id Machine.Machine_Name, MachineComponents.Axis, MachineComponents.Component from MachineComponents , Machine where MachineComponents.Machine_Id = Machine.Id and Machine.Id = 1";

        string query = "select m1.Id, m.Machine_Name, M1.Axis, M1.Component from MachineComponents m1, machine m where m1.Machine_Id = m.Id and m.Id = 1";

        //string query = "select * from MachineComponents";

        dataTable = dbConn.GetData(query);



        foreach (DataRow row in dataTable.Rows)
        {
            MachineComponent mc = new MachineComponent();
            mc.Id = row["Id"].ToString();
            mc.Machine_Name = row["Machine_Name"].ToString();
            mc.Axis = row["Axis"].ToString();
            mc.Component = row["Component"].ToString();
            mc.count = 0;

            machineComponents.Add(mc);
        }

        return base.OnInitializedAsync();
    }

    private void loop()
    {

        if (ind < machineComponents.Count)
        {
            mach = machineComponents[ind];
            mach.count += 1;
            DataTable d = acquireData("cDAQ1Mod1", 1, int.Parse(mach.Id), mach.count);
            dbConn.BulkInsert(d);
            if (mach.count == 3)
            {
                moveSensor = true;
                ind++;
            }

        }
        if (ind >= machineComponents.Count)
        {
            moveSensor = false;
            underTest = false;
            TestCompleted = true;
        }

    }

    private void onMoveSensor()
    {
        moveSensor = false;
    }


    private void startDataAcquisiton()
    {
        underTest = true;

        //foreach (MachineComponent m in machineComponents){
        //    for (int j =1;j <=3 ; j++)
        //    {
        //        m.count = j;
        //        DataTable d = acquireData("cDAQ1Mod1");

        //        int i = 0;
        //        foreach (DataRow dtRow in d.Rows)
        //        {

        //            Console.Write("Row " + i + ": ");
        //            foreach (var item in dtRow.ItemArray)
        //            {
        //                Console.Write(item.ToString() + "  ");
        //            }
        //            i++;
        //            Console.WriteLine();
        //        }



        //        dbConn.BulkInsert(d);
        //    }
        //}

        //TestCompleted = true;





        /*string connectionString = @"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=QuickMill;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False";
        using (SqlConnection connection = new SqlConnection(connectionString))
        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connection))
            {
            connection.Open();
            bulkCopy.DestinationTableName = "TestTable";

            bulkCopy.WriteToServer(d);



        }
        Console.WriteLine("Done All End");
    */
    }


    // Code to acquire data from the sensor and return that data in form of a data table

    private DataTable acquireData(string deviceName, int gTestId, int componentId, int testRound)
    {
        var timeStamp = new List<string>();
        double start;
        double end;


        DataTable dt = new DataTable();

        // Define Parameters
        int rate = 5;
        int _samplesPerChannel = 10;
        int bufferSize = rate * _samplesPerChannel;

        //Inilitiaze task
        NationalInstruments.DAQmx.Task acelerometerTask1 = new NationalInstruments.DAQmx.Task();

        //Define Channels
        acelerometerTask1.AIChannels.CreateAccelerometerChannel($"{deviceName}/ai0", "A00", AITerminalConfiguration.Pseudodifferential, -5, 5, 100, AIAccelerometerSensitivityUnits.MillivoltsPerG, AIExcitationSource.None, 0, AIAccelerationUnits.G);
        acelerometerTask1.AIChannels.CreateAccelerometerChannel($"{deviceName}/ai1", "A01", AITerminalConfiguration.Pseudodifferential, -5, 5, 100, AIAccelerometerSensitivityUnits.MillivoltsPerG, AIExcitationSource.None, 0, AIAccelerationUnits.G);
        acelerometerTask1.AIChannels.CreateAccelerometerChannel($"{deviceName}/ai2", "A02", AITerminalConfiguration.Pseudodifferential, -5, 5, 100, AIAccelerometerSensitivityUnits.MillivoltsPerG, AIExcitationSource.None, 0, AIAccelerationUnits.G);

        acelerometerTask1.Timing.ConfigureSampleClock("", rate, SampleClockActiveEdge.Rising, SampleQuantityMode.FiniteSamples, bufferSize);


        acelerometerTask1.Control(TaskAction.Verify);
        start = DateTime.Now.ToOADate();
        acelerometerTask1.Start();

        AnalogMultiChannelReader reader1 = new AnalogMultiChannelReader(acelerometerTask1.Stream);

        double[,] data = reader1.ReadMultiSample(bufferSize);

        acelerometerTask1.Dispose();
        end = DateTime.Now.ToOADate();

        Console.WriteLine(DateTime.FromOADate(start).ToString("yyyy’-‘MM’-‘dd’T’HH’:’mm’:’ss.fffffffK"));
        Console.WriteLine(DateTime.FromOADate(end).ToString("yyyy’-‘MM’-‘dd’T’HH’:’mm’:’ss.fffffffK"));


        //Calculate time difference between each sample
        double diff = (end - start) / (double)bufferSize;


        //Define data columns
        DataColumn dtColumn;
        DataRow dtRow;

        // Create TimeStamp column.
        dtColumn = new DataColumn();
        dtColumn.DataType = typeof(double);
        dtColumn.ColumnName = "TimeStamp";
        //dtColumn.Caption = "Cust Name";
        dtColumn.AutoIncrement = false;
        dtColumn.ReadOnly = false;
        dtColumn.Unique = false;
        dt.Columns.Add(dtColumn);

        // Create X-axis column.
        dtColumn = new DataColumn();
        dtColumn.DataType = typeof(Double);
        dtColumn.ColumnName = "X-Axis";
        //dtColumn.Caption = "Cust Name";
        dtColumn.AutoIncrement = false;
        dtColumn.ReadOnly = false;
        dtColumn.Unique = false;
        dt.Columns.Add(dtColumn);



        // Create y-axis column.
        dtColumn = new DataColumn();
        dtColumn.DataType = typeof(Double);
        dtColumn.ColumnName = "Y-Axis";
        //dtColumn.Caption = "Cust Name";
        dtColumn.AutoIncrement = false;
        dtColumn.ReadOnly = false;
        dtColumn.Unique = false;
        dt.Columns.Add(dtColumn);


        // Create z-axis column.
        dtColumn = new DataColumn();
        dtColumn.DataType = typeof(Double);
        dtColumn.ColumnName = "Z-Axis";
        //dtColumn.Caption = "Cust Name";
        dtColumn.AutoIncrement = false;
        dtColumn.ReadOnly = false;
        dtColumn.Unique = false;
        dt.Columns.Add(dtColumn);

        // Create gTest ID Coulmn.
        dtColumn = new DataColumn();
        dtColumn.DataType = typeof(int);
        dtColumn.ColumnName = "G_test_id";
        dtColumn.AutoIncrement = false;
        dtColumn.ReadOnly = false;
        dtColumn.Unique = false;
        dt.Columns.Add(dtColumn);

        // Create Component ID Coulmn.
        dtColumn = new DataColumn();
        dtColumn.DataType = typeof(int);
        dtColumn.ColumnName = "Component_id";
        dtColumn.AutoIncrement = false;
        dtColumn.ReadOnly = false;
        dtColumn.Unique = false;
        dt.Columns.Add(dtColumn);

        // Create testRound ID Coulmn.
        dtColumn = new DataColumn();
        dtColumn.DataType = typeof(int);
        dtColumn.ColumnName = "Test_Round";
        dtColumn.AutoIncrement = false;
        dtColumn.ReadOnly = false;
        dtColumn.Unique = false;
        dt.Columns.Add(dtColumn);

        // Filling the dataTable
        for (int i = 0; i < data.GetLength(1); i++)
        {
            dtRow = dt.NewRow();
            dtRow["TimeStamp"] = start + (diff * i);
            dtRow["X-Axis"] = data[0, i];
            dtRow["Y-Axis"] = data[1, i];
            dtRow["Z-Axis"] = data[2, i];
            dtRow["G_test_id"] = gTestId;
            dtRow["Component_id"] = componentId;
            dtRow["Test_Round"] = testRound;
            dt.Rows.Add(dtRow);
        }



        return dt;
    }
}