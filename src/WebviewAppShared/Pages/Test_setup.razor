@page "/test_setup"
@using System.Diagnostics
@using System.Text.Json;
@using WebviewAppShared.Data
@using System.Data
@inject NavigationManager navigationManager
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@using System.ComponentModel.DataAnnotations;
@using NationalInstruments.DAQmx;


<h1>Test Setup</h1>


<span class="danger">
    @Message
</span>
<br />


<div class="container">
    <div class="row">
        <div class="btn-group btn-breadcrumb breadcrumb-default bg-dark">
            <div class="btn btn-info"><b>DEFINE</b></div>
            <a href="#" class="btn btn-default visible-lg-block visible-md-block text-white font-weight-bold">CAPTURE</a>
            <a href="#" class="btn btn-default visible-lg-block visible-md-block text-white font-weight-bold">ANALYZE</a>
            <a href="#" class="btn btn-default visible-lg-block visible-md-block text-white font-weight-bold">REVIEW</a>
        </div>
        <p></p>
    </div>

    @foreach (var mch in machines)
    {
        @if (objTest.TD2 == mch.M1)
        {
            machine = mch.M2;
        }

    }

    <div class="row">
        <div class="col-sm-9"></div>
        <div class="col-sm-3 card bg-transparent">
            <h3>@machine</h3>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-3 card bg-transparent">
            <form>
                <div class="form-group row">
                    <label for="machine_no" class="col-sm-5 col-form-label">Machine #</label>
                    <div class="col-sm-7">
                        <select class="form-select rounded-lg" style="width: 135px;height:30px;" asp-for="machine_name" @bind="@objTest.TD2">

                            <option value="select" selected>Select Machine </option>
                            @foreach (var item in machines)
                            {
                                <option value=@item.M1>@item.M1 @item.M2 </option>
                            }
                        </select>

                        @*<input type="text" class="form-control" id="machine_no" placeholder="0000" @bind-value="@objTest.MachineSerialNumber" />*@
                    </div>

                </div>
                <div class="form-group row">
                    <label for="hours" class="col-sm-5 col-form-label">Hours (Required)</label>
                    <div class="col-sm-7">
                        <input type="text" class="form-control" id="hours" @bind-value="@objTest.TD3" required />
                        <span asp-validation-for="objTest.TD3" class="text-danger"></span>

                    </div>
                </div>
                <div class="form-group row">
                    <label for="operator" class="col-sm-5 col-form-label">Operator (Required)</label>
                    <div class="col-sm-7">
                        <input type="text" class="form-control" id="operator" @bind-value="@objTest.TD4" required />
                        <span asp-validation-for="objTest.TD4" class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="mode" class="col-sm-5 col-form-label">Mode</label>
                    <div class="col-sm-7">
                        <input type="text" class="form-control" id="mode" @bind-value="@objTest.TD5" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="mode" class="col-sm-5 col-form-label">Test Duration(sec)</label>
                    <div class="col-sm-7">
                        <input type="text" class="form-control" id="duration" asp-for="duration" @bind-value="@duration" required placeholder="15" min="15" dfault="15" />
                        <span asp-validation-for="duration" class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="sensor_no" class="col-sm-5 col-form-label">DAQ</label>
                    <div class="col-sm-7">
                        <select class="form-select rounded-lg" style="width: 135px;height:30px;" asp-for="sensor_name" @bind="@objTest.TD6">

                            <option value="select" selected>Select DAQ</option>
                            @foreach (var item in elgibleDevices)
                            {
                                <option value="@($"{item}Mod1")">@item</option>
                            }
                        </select>

                        @*<input type="text" class="form-control" id="sensor_no" placeholder="0000" @bind-value="@objTest.Sensor" />*@
                    </div>
                </div>

                <div class="form-group row">
                    <label for="sensor_no" class="col-sm-5 col-form-label">Sensor #</label>
                    <div class="col-sm-7">
                        <select class="form-select rounded-lg" style="width: 135px;height:30px;" asp-for="sensor_name" @bind="@selectedSensor">

                            <option value="select" selected>Select Sensor </option>
                            @foreach (var item in sensors)
                            {
                                <option value="@item.S1">@(item.S1 + " " + item.S5)</option>
                            }
                        </select>

                        @*<input type="text" class="form-control" id="sensor_no" placeholder="0000" @bind-value="@objTest.Sensor" />*@
                    </div>
                </div>
                @*<div class="form-group row">
                <label for="date" class="col-sm-5 col-form-label">Date</label>
                <div class="col-sm-7">
                <input type="date" class="form-control" id="date" @bind-value="@objTest.Date" />
                </div>
                </div>*@

               @* <div class="form-group row">
                    <label for="machine_no" class="col-sm-5 col-form-label">Accelerometer</label>
                    <div class="col-sm-7">
                        <input type="text" class="form-control" placeholder="#1 PCB 356A15 LW336579" @bind-value="@sensor.S5" required />
                        <span asp-validation-for="@sensor.S5" class="text-danger"></span>
                    </div>

                </div>

                <div class="form-group row">
                    <label for="machine_no" class="col-sm-5 col-form-label">Accel X Sensitivity</label>
                    <div class="col-sm-7">
                        <input type="text" class="form-control" placeholder="102.4" @bind-value="@sensor.S6" />
                    </div>

                </div>

                <div class="form-group row">
                    <label for="machine_no" class="col-sm-5 col-form-label">Accel Y Sensitivity</label>
                    <div class="col-sm-7">
                        <input type="text" class="form-control" placeholder="104.1" @bind-value="@sensor.S7" />
                    </div>

                </div>
                <div class="form-group row">
                    <label for="machine_no" class="col-sm-5 col-form-label">Accel Z Sensitivity</label>
                    <div class="col-sm-7">
                        <input type="text" class="form-control" placeholder="102.9" @bind-value="@sensor.S8" />
                    </div>

                </div>
                <div class="form-group row">
                    <label for="machine_no" class="col-sm-5 col-form-label">Sampling Frequency</label>
                    <div class="col-sm-7">
                        <input type="text" class="form-control" placeholder="25600" @bind-value="@sensor.S9" />
                    </div>

                </div>*@

            </form>
        </div>


        <div class="col-sm-9 card bg-transparent">
            <table id="maintenance-table" class="table table-image text-white">
                <thead class="bg-info">
                    <tr>
                        <th scope="col">Axis</th>
                        <th scope="col">Component</th>
                        <th scope="col">Task</th>
                        <th scope="col">Notes</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                
                <tbody>
                    @if (machine == "Intimidator")
                    {
                        <tr class="table-secondary text-black-50">
                            <td>
                                <select name="axis" id="axis" @bind="@objMaintenance.Axis">
                                    <option value="spindle">Spindle</option>
                                    <option value="w">W</option>
                                    <option value="x">X</option>
                                    <option value="y">Y</option>
                                    <option value="z">Z</option>
                                </select>
                            </td>
                            @if (objMaintenance.Axis != null)
                            {
                                flag = objMaintenance.Axis;
                            }
                            @*<td>
                                @if (flag == "spindle")
                                {
                                    <select name="components" id="components">
                                        <option value="DE Bearing">DE Bearing</option>
                                        <option value="ODE Bearing">ODE Bearing</option>
                                    </select>
                                }
                                else if (flag == "w" || flag == "x" || flag == "y")
                                {
                                    <select name="components" id="components">
                                        <option value="Ballscrew DE Bearing">Ballscrew DE Bearing</option>
                                        <option value="Ballscrew ODE Bearing">Ballscrew ODE Bearing</option>
                                        <option value="Ballscrew">Ballscrew</option>
                                        <option value="Linear Bearing">Linear Bearing</option>
                                    </select>
                                }
                                else if (flag == "z")
                                {
                                    <select name="components" id="components">
                                        <option value="Ballscrew DE Bearing">Ballscrew DE Bearing</option>
                                        <option value="Ballscrew Nut">Ballscrew Nut</option>
                                        <option value="Linear Bearing">Linear Bearing</option>
                                    </select>
                                }
                            </td>*@
                            <td>
                                <select name="task" id="task">
                                    <option value="lubricated">Lubricated</option>
                                    <option value="replaced">Replaced</option>
                                    <option value="fan cleaned">Fan Cleaned</option>
                                    <option value="other">Other</option>
                                </select>
                            </td>
                            <td><input type="text" @bind-value="@objMaintenance.Note" /></td>
                            <td><button type="button" id="btnAdd" class="btn btn-xs btn-primary classAdd">Add More</button></td>
                        </tr>
                    }
                    else if (machine == "Annihilator")
                    {
                        <tr class="table-secondary text-black-50">
                            <td>
                                <select name="axis" id="axis" @bind="@objMaintenance.Axis">
                                    <option value="spindle">Spindle</option>
                                    <option value="x">X</option>
                                    <option value="y">Y</option>
                                    <option value="z">Z</option>
                                </select>
                            </td>
                            @if (objMaintenance.Axis != null)
                            {
                                flag = objMaintenance.Axis;
                            }
                            <td>
                                @if (flag == "spindle")
                                {
                                    <select name="components" id="components">
                                        <option value="ODE Bearing">ODE Bearing</option>
                                    </select>
                                }
                                else if (flag == "x" || flag == "y")
                                {
                                    <select name="components" id="components">
                                        <option value="Ballscrew">Ballscrew</option>
                                        <option value="Linear Bearing">Linear Bearing</option>
                                    </select>
                                }
                                else if (flag == "z")
                                {
                                    <select name="components" id="components">
                                        <option value="Ballscrew">Ballscrew</option>
                                        <option value="Ballscrew DE Bearing">Ballscrew DE Bearing</option>
                                        <option value="Linear Bearing">Linear Bearing</option>
                                    </select>
                                }
                            </td>
                            <td>
                                <select name="task" id="task">
                                    @if (flag != "spindle")
                                    {
                                        <option value="lubricated">Lubricated</option>
                                    }
                                    <option value="replaced">Replaced</option>
                                </select>
                            </td>
                            <td><input type="text" @bind-value="@objMaintenance.Note" /></td>

                            <td>
                                <button type="button" id="btnAdd" class="btn btn-xs btn-primary classAdd"> 
                                @*@onclick="@(async () => {
        await JSRuntime.InvokeVoidAsync("addRow"); // Pass a reference to this component
    })">*@
                                    Add More
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <button type="button" id="btnSubmit" class="btn btn-primary btn-md pull-right btn-sm" @onclick="RunCommand">Submit</button>

        </div>
    </div>

    @*<button type="button" class="btn btn-secondary btn-lg" @onclick="RunCommand">Next</button>*@
</div>

@code {

    public Database dbConn { get; set; }
    public DataTable dataTable { get; set; }
    public TD objTest { get; set; }
    public S sensor { get; set; }
    public List<Test> tests { get; set; }
    public Maintenance objMaintenance { get; set; }
    public List<Maintenance> maintenances { get; set; }
    public Machine objMachine { get; set; }
    public List<M> machines { get; set; }
    public List<S> sensors { get; set; }
    public string query { get; set; }
    public string query2 { get; set; }
    public string query3 { get; set; }
    public string sensorDetailsQuery { get; set; }
    public string Message { get; set; }
    public string flag { get; set; }
    public int lineCount { get; set; }
    public string machine { get; set; }
    public TD newTestDetail { get; set; }

    public string selectedSensor { get; set; }

    public string[] elgibleDevices{ get; set; }

    //To be implemented
    [Required(ErrorMessage = "Email is required.")]
    public int duration { get; set; }


    public string flag_machineName { get; set; }

    protected override System.Threading.Tasks.Task OnInitializedAsync()
    {

        objTest = new TD();
        dbConn = new Database();
        objMaintenance = new Maintenance();
        objMachine = new Machine();
        newTestDetail = new TD();
        sensor = new S();
        GetData();
        GetSensorData();
        flag = "spindle";
        lineCount = 1;
        duration = 15;

        // Get all devices from local 
        string[] devices = DaqSystem.Local.Devices;
        //Filtering the devices
        Debug.WriteLine(devices.Length);
        elgibleDevices = FilterCDAQValues(devices);


        return base.OnInitializedAsync();
    }

    static string[] FilterCDAQValues(string[] inputArray)
    {
        // Use LINQ to filter values that start with "cDAQ" followed by a number
        var filteredValues = inputArray
            .Where(value => value.StartsWith("cDAQ") && IsNumeric(value.Substring(4)))
            .ToArray();

        return filteredValues;
    }

    static bool IsNumeric(string value)
    {
        // Check if the value is numeric
        return int.TryParse(value, out _);
    }

    //protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        await JSRuntime.InvokeVoidAsync("eval", @"
    //        function addRow() { 
    //            var newRow = $(this).closest('tr').clone();

    //            newRow.find('#btnAdd').remove();

    //            // Clear any input values in the new row
    //            //newRow.find('input').val('');

    //            // Append the new row to the table body
    //            $('#maintenance-table tbody').append(newRow);
    //           }
    //        ");
    //    }
    //}
    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
        function addRow() {
            //var newRow = $(button).closest('tr').clone();

            //newRow.find('#btnAdd').remove();

            //// Clear any input values in the new row
            ////newRow.find('input').val('');

            //// Append the new row to the table body
            //$('#maintenance-table tbody').append(newRow);

            //var tableBody = document.querySelector('#maintenance-table tbody');
            //    var newRow = tableBody.querySelector('tr').cloneNode(true);

            //    // Update unique IDs for the new row's elements if needed

            //    tableBody.appendChild(newRow);
            rowCount+=1;
           }
        ");
        }
    }

    public void RunCommand()
    {


        // Check if the model is valid
        var validationContext = new ValidationContext(objTest);
        var validationResults = new List<ValidationResult>();

        sensor = sensors.FirstOrDefault(item => item.S1 == Convert.ToInt32(selectedSensor));

        if (Validator.TryValidateObject(objTest, validationContext, validationResults, true))
        {
            // Check for server-side validation of Machine dropdown
            if (objTest.TD2 != "select")
            {
                // Check for server-side validation of Sensor dropdown
                if (objTest.TD6 != "select")
                {
                    // Check for server-side validation of Test Duration
                    if (duration >= 15)
                    {
                        if (selectedSensor == "select")
                        {
                            Message = "Select sensor" ;
                        }
                        else
                        {
                            
                        
                        // Model is valid, proceed with data insertion
                        DateTime datetime = DateTime.Now;

                        var device = DaqSystem.Local.LoadDevice(objTest.TD6);
                        sensor.S2 = objTest.TD6;
                        sensor.S3 = device.ProductType;
                        sensor.S4 = device.SerialNumber;
                       
                        sensor.S5 = sensor.S5.StartsWith("#") ? sensor.S5.Substring(1) : sensor.S5;

                        query = "INSERT INTO TD(TD2, TD3, TD4, TD5, TD6, TD7)VALUES('" + objTest.TD2 + "','" + objTest.TD3 + "','" + objTest.TD4 + "','" + objTest.TD5 + "','" + objTest.TD6 + "','" + datetime + "')";
                        dbConn.InsertData(query);

                        // Event data table to be added in place of Maintenance

                        //query2 = "INSERT INTO Maintenance(MachineSerialNumber, Axis, Component, Task, Note, TestId)VALUES('" + objTest.MachineSerialNumber + "','" + objMaintenance.Axis + "','" + objMaintenance.Component + "','" + objMaintenance.Task + "','" + objMaintenance.Note + "','" + objTest.TestId + "')";
                        //dbConn.InsertData(query2);
                        query3 = "SELECT * FROM TD ORDER BY TD1 DESC LIMIT 1";
                        dataTable = dbConn.GetData(query3);
                        newTestDetail.TD1 = Convert.ToInt32(dataTable.Rows[0]["TD1"]);
                        newTestDetail.TD6 = Convert.ToString(dataTable.Rows[0]["TD6"]);

                        navigationManager.NavigateTo($"/service_testing/{newTestDetail.TD1}/{newTestDetail.TD6}/{duration}/{sensor.S3}/{sensor.S4}/{sensor.S5}/{sensor.S6}/{sensor.S7}/{sensor.S8}/{sensor.S9}");

                        Message = "Data Saved! " + newTestDetail.TD1;
                        }
                    }
                    else
                    {
                        // Invalid Test Duration value
                        Message = "Test Duration must be 15 seconds or more.";
                    }
                }
                else
                {
                    // Invalid Sensor selection
                    Message = "Please select a valid Sensor.";
                }
            }
            else
            {
                // Invalid Machine selection
                Message = "Please select a valid Machine.";
            }
        }
        else
        {
            // Model is not valid, display validation errors
            Message = "Validation failed. Please check the required fields.";
        }
    }

    public void GetData()
    {
        query = "SELECT * FROM M";
        dataTable = dbConn.GetData(query);

        machines = new List<M>();

        for (int i = 0; i < dataTable.Rows.Count; i++)
        {
            M mch = new M();
            mch.M1 = Convert.ToString(dataTable.Rows[i]["M1"]);
            mch.M2 = Convert.ToString(dataTable.Rows[i]["M2"]);
            machines.Add(mch);
        }
    }

    public void GetSensorData()
    {
        sensorDetailsQuery = "SELECT * FROM S";
        dataTable = dbConn.GetData(sensorDetailsQuery);

        sensors = new List<S>();

        for (int i = 0; i < dataTable.Rows.Count; i++)
        {
            S snsr = new S();
            snsr.S1 = Convert.ToInt32(dataTable.Rows[i]["S1"]);
            snsr.S5 = Convert.ToString(dataTable.Rows[i]["S5"]);
            sensors.Add(snsr);
        }
    }


}